{
  "language": "Solidity",
  "sources": {
    "contracts/ygmstake/YgmStaking.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\nabstract contract YgmStakingBase is Ownable, Pausable {\n    // Stake event\n    event Stake(\n        address indexed account,\n        uint256 indexed tokenId,\n        uint256 timestamp\n    );\n    // UnStake event\n    event UnStake(\n        address indexed account,\n        uint256 indexed tokenId,\n        uint256 timestamp\n    );\n    // Withdraw Earn event\n    event WithdrawEarn(\n        address indexed account,\n        uint256 amount,\n        uint256 timestamp\n    );\n\n    // Staking data\n    struct StakingData {\n        address account;\n        bool state;\n    }\n\n    // Total number of all staked YGM\n    uint32 public stakeTotals;\n    // The number of accounts in staking\n    uint32 public accountTotals;\n\n    // todo YGM token\n    IERC721 ygm;\n    // Create_time\n    uint64 public create_time;\n\n    // todo usdt token\n    IERC20 usdt;\n    // todo Time period\n    uint64 public perPeriod;\n\n    // Payment account\n    address public paymentAccount;\n    // Rate\n    uint64 public earnRate = 70;\n\n    // Staking Data\n    mapping(uint256 => StakingData) public stakingDatas;\n\n    // List of account staking tokenId\n    mapping(address => uint256[]) stakingTokenIds;\n\n    // The amount of usdt shared by all users on a certain day\n    mapping(uint256 => uint256) public day_total_usdt;\n\n    // The total amount of ygm staked on a certain day\n    mapping(uint256 => uint256) public day_total_stake;\n\n    // The time a user staked\n    mapping(address => uint256) public stakeTime;\n\n    // The income of a user's stake\n    mapping(address => uint256) public stakeEarnAmount;\n\n    // Set the amount of usdt allocated on a certain day (onlyOwner)\n    function setDayAmount(uint256 _usdtAmount)\n        external\n        onlyOwner\n        returns (bool)\n    {\n        uint256 _days = getDays(create_time, block.timestamp);\n        day_total_usdt[_days] += _usdtAmount;\n        _syncDayTotalStake();\n        return true;\n    }\n\n    // Set create time and per period time (onlyOwner)\n    function start(uint256 _create_time, uint256 _period)\n        public\n        onlyOwner\n        returns (bool)\n    {\n        require(_create_time > 0 && _period > 0, \"set time error\");\n        create_time = uint64(_create_time);\n        perPeriod = uint64(_period);\n        return true;\n    }\n\n    // Set eran rate (onlyOwner)\n    function setRate(uint256 _rate) external onlyOwner returns (bool) {\n        require(_rate <= 100, \"set rate error\");\n        earnRate = uint64(_rate);\n        return true;\n    }\n\n    // Set YGM contract address (onlyOwner)\n    function setYgm(address _ygmAddress) external onlyOwner returns (bool) {\n        ygm = IERC721(_ygmAddress);\n        return true;\n    }\n\n    // Set usdt contract address (onlyOwner)\n    function setUsdt(address _usdtAddress) external onlyOwner returns (bool) {\n        usdt = IERC20(_usdtAddress);\n        return true;\n    }\n\n    // Set payment account address (onlyOwner)\n    function setPayAccount(address _payAccount)\n        external\n        onlyOwner\n        returns (bool)\n    {\n        paymentAccount = _payAccount;\n        return true;\n    }\n\n    // Withdraw YGM (onlyOwner) No profit, only withdraw YGM\n    function withdrawYgm(address _account, uint256 _tokenId)\n        external\n        onlyOwner\n        returns (bool)\n    {\n        StakingData memory _data = stakingDatas[_tokenId];\n        require(_data.state == true, \"tokenId isn't staked\");\n        require(_data.account == _account, \"tokenId doesn't belong to account\");\n        ygm.safeTransferFrom(address(this), _account, _tokenId);\n\n        // Delete tokenId in stakingTokenIds\n        uint256 _len = stakingTokenIds[_account].length;\n        for (uint256 j = 0; j < _len; j++) {\n            if (stakingTokenIds[_account][j] == _tokenId) {\n                stakingTokenIds[_account][j] = stakingTokenIds[_account][\n                    _len - 1\n                ];\n                stakingTokenIds[msg.sender].pop();\n                break;\n            }\n        }\n        // Sub account total\n        if (stakingTokenIds[_account].length == 0) {\n            accountTotals -= 1;\n        }\n\n        // Delete tokenId in stakingDatas\n        delete stakingDatas[_tokenId];\n        // Sub stake Totals\n        stakeTotals -= 1;\n        _syncDayTotalStake();\n        return true;\n    }\n\n    // Get the total amount of staking on a certain day\n    function getDayTotalStake(uint256 _day) external view returns (uint256) {\n        return day_total_stake[_day];\n    }\n\n    // Get account staking tokenId list\n    function getStakingTokenIds(address _account)\n        external\n        view\n        returns (uint256[] memory)\n    {\n        uint256[] memory _tokenIds = stakingTokenIds[_account];\n        return _tokenIds;\n    }\n\n    function getDays(uint256 _startTime, uint256 _endtime)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 _days = (_endtime - _startTime) / perPeriod;\n        return _days;\n    }\n\n    function getReward(address _sender) public view returns (uint256) {\n        if (stakeTime[_sender] > 0) {\n            uint256 staking_amount = stakingTokenIds[_sender].length;\n            if (staking_amount == 0) {\n                return 0;\n            }\n            uint256 _start = getDays(create_time, stakeTime[_sender]);\n            uint256 _end = getDays(create_time, block.timestamp);\n            uint256 _totalEarn = 0;\n\n            for (uint256 i = _start; i < _end; i++) {\n                if (day_total_stake[i] > 0) {\n                    uint256 _earn = (day_total_usdt[i] * staking_amount) /\n                        day_total_stake[i];\n                    _totalEarn += _earn;\n                }\n            }\n            return _totalEarn + stakeEarnAmount[_sender];\n        } else {\n            return 0;\n        }\n    }\n\n    function _syncDayTotalStake() internal {\n        uint256 _days = getDays(create_time, block.timestamp);\n        day_total_stake[_days] = stakeTotals;\n    }\n\n    function _withdrawEarn(address _account) internal returns (uint256) {\n        // Calculate the withdrawal ratio\n        uint256 _realEarnAmount;\n        uint256 _days = getDays(create_time, block.timestamp);\n        if (accountTotals > 0) {\n            uint256 _earnAmount = stakeEarnAmount[_account];\n            _realEarnAmount = (_earnAmount * earnRate) / 100;\n            day_total_usdt[_days] += (_earnAmount - _realEarnAmount);\n        }\n\n        require(\n            _realEarnAmount > 0,\n            \"Insufficient balance available for withdraw\"\n        );\n        stakeEarnAmount[_account] = 0;\n        usdt.transferFrom(paymentAccount, _account, _realEarnAmount);\n\n        return _realEarnAmount;\n    }\n\n    // Update stake earn (modifier)\n    modifier updateEarn() {\n        address _sender = _msgSender();\n        if (create_time < stakeTime[_sender]) {\n            stakeEarnAmount[_sender] = getReward(_sender);\n        }\n        stakeTime[_sender] = block.timestamp;\n        _;\n    }\n}\n\ncontract YgmStaking is ReentrancyGuard, ERC721Holder, YgmStakingBase {\n    constructor(\n        address ygmAddress,\n        address usdtAddress,\n        address _paymentAccount,\n        uint256 _create_time,\n        uint256 _perPeriod\n    ) {\n        ygm = IERC721(ygmAddress);\n        usdt = IERC20(usdtAddress);\n        paymentAccount = _paymentAccount;\n        create_time = uint64(_create_time);\n        perPeriod = uint64(_perPeriod);\n    }\n\n    // Batch stake YGM\n    function stake(uint256[] calldata _tokenIds)\n        external\n        whenNotPaused\n        nonReentrant\n        updateEarn\n        returns (bool)\n    {\n        address _sender = _msgSender();\n        uint256 _number = _tokenIds.length;\n        require(_number > 0, \"invalid tokenIds\");\n\n        for (uint256 i = 0; i < _number; i++) {\n            require(_tokenIds[i] > 0, \"invalid tokenId\");\n            require(!stakingDatas[_tokenIds[i]].state, \"invalid stake state\");\n            require(ygm.ownerOf(_tokenIds[i]) == _sender, \"invalid owner\");\n        }\n\n        if (stakingTokenIds[_sender].length == 0) {\n            accountTotals += 1;\n        }\n\n        for (uint256 i = 0; i < _number; i++) {\n            uint256 _tokenId = _tokenIds[i];\n            ygm.safeTransferFrom(msg.sender, address(this), _tokenId);\n\n            StakingData storage _data = stakingDatas[_tokenId];\n            _data.account = _sender;\n            _data.state = true;\n\n            // Add _tokenId in stakingTokenIds[account] list\n            stakingTokenIds[msg.sender].push(_tokenId);\n\n            emit Stake(_sender, _tokenId, block.timestamp);\n        }\n\n        // Add stake Totals\n        stakeTotals += uint32(_number);\n        _syncDayTotalStake();\n        return true;\n    }\n\n    // Batch stake YGM\n    function unStake(uint256[] calldata _tokenIds)\n        external\n        whenNotPaused\n        nonReentrant\n        updateEarn\n        returns (bool)\n    {\n        address _sender = _msgSender();\n        uint256 _number = _tokenIds.length;\n        require(_number > 0, \"invalid tokenIds\");\n        for (uint256 i = 0; i < _number; i++) {\n            uint256 _tokenId = _tokenIds[i];\n            require(_tokenId > 0, \"invalid tokenId\");\n            StakingData memory _data = stakingDatas[_tokenId];\n            require(_data.account == _sender, \"invalid account\");\n            require(_data.state, \"invalid stake state\");\n\n            // SafeTransferFrom\n            ygm.safeTransferFrom(address(this), _data.account, _tokenId);\n\n            // Delete tokenId\n            uint256 _len = stakingTokenIds[_sender].length;\n            for (uint256 j = 0; j < _len; j++) {\n                if (stakingTokenIds[_sender][j] == _tokenId) {\n                    stakingTokenIds[_sender][j] = stakingTokenIds[_sender][\n                        _len - 1\n                    ];\n                    stakingTokenIds[msg.sender].pop();\n                    break;\n                }\n            }\n\n            // Sub account total\n            if (stakingTokenIds[_sender].length == 0) {\n                accountTotals -= 1;\n            }\n            // Reset data\n            delete stakingDatas[_tokenId];\n\n            emit UnStake(_sender, _tokenId, block.timestamp);\n        }\n        // Withdraw Earn\n        if (stakeEarnAmount[_sender] > 0) {\n            uint256 amount = _withdrawEarn(_sender);\n            emit WithdrawEarn(_sender, amount, block.timestamp);\n        }\n        // Sub stake Totals\n        stakeTotals -= uint32(_number);\n        _syncDayTotalStake();\n        return true;\n    }\n\n    // Withdraw Earn USDT\n    // (YGM is still stake in the contract)\n    function withdrawEarn()\n        external\n        whenNotPaused\n        nonReentrant\n        updateEarn\n        returns (bool)\n    {\n        address sender = _msgSender();\n        require(stakeEarnAmount[sender] > 0, \"Insufficient balance\");\n        uint256 amount = _withdrawEarn(sender);\n        emit WithdrawEarn(sender, amount, block.timestamp);\n        _syncDayTotalStake();\n        return true;\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Receiver.sol\";\n\n/**\n * @dev Implementation of the {IERC721Receiver} interface.\n *\n * Accepts all token transfers.\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n */\ncontract ERC721Holder is IERC721Receiver {\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "": ["ast"],
        "*": [
          "abi",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.legacyAssembly",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "evm.gasEstimates",
          "evm.assembly"
        ]
      }
    }
  }
}
